
    //'(' 와 ')' 로만 이루어진 문자열이 있을 경우, '(' 의 개수와 ')' 의 개수가 같다면 이를 균형잡힌 괄호 문자열 = >"(()))("
    //('와 ')'의 괄호의 짝도 모두 맞을 경우에는 이를 올바른 괄호 문자열 => "(())()"
    
    /*
    1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다. 
    2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리합니다. 단, u는 "균형잡힌 괄호 문자열"로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다. 
    "()))((()" =>
    u => "()"
    v => "))((()"
    3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. 
    "))((()" =>
    u => ()
    v => "))(("
    3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다. 
    4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다. 
    4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다. 
    4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. 
    4-3. ')'를 다시 붙입니다. 
    4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. 
    4-5. 생성된 문자열을 반환합니다.
    */
    function solution(p) {
    if (p.length === 0) return p // 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다.
    let bracketCount = 0 // 반복문을 돈 이후에 브라켓카운트가 0이라면 한쌍의 괄호를 찾았다는 것.
    let correct = true // 올바른 괄호 문자열인지 판별하는 값.
    for (let i = 0; i < p.length; i++) {
        bracketCount = p[i] === '(' ? bracketCount + 1 : bracketCount - 1 
        if (bracketCount < 0) correct = false //올바른 괄호 문자열인지 아닌지 판별. (닫힌괄호부터 나왔다면 이미 올바른 괄호가 아님)
        if (bracketCount === 0) { // p에서 짝지어진 한쌍의 괄호를 찾았을 때 이 if문에 걸리게된다.(첫 한쌍을 찾는이유는 균형잡힌 괄호 문자열로 더 이상 분리할 수 없는 "균형잡힌 괄호 문자열"인 u를 분리하기 위함)
            const [u, v] = [p.slice(0, i + 1), p.slice(i + 1)] //  u와 v로 분리한다.
            if (correct) { // 3. u가 "올바른 괄호 문자열" 라면,
                return u + solution(v) //3-1 문자열 v에 대해 1단계부터 다시 수행한 결과를 u에 이어붙인다.(v를 재귀시켜서 다시 위의 과정을 진행한다.)
            } else { //4. u가 "올바른 괄호 문자열"이 아니라면
                let emptyString = '(' + solution(v) + ')' //  빈 문자열에 첫 번째 문자로 '('를 붙입니다. => 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. => ')'를 다시 붙입니다.
                const sliceString = u.slice(1,u.length-1).split('')// u의 첫 번째와 마지막 문자를 제거하고
                const reversedString = [...sliceString].map(el => el === '(' ? el = ')' : el = '(').join('')//나머지 문자열의 괄호 방향을 뒤집어서
                    
                return emptyString + reversedString //뒤에 붙입니다
            }
        }
    }
}


solution("()))((()")